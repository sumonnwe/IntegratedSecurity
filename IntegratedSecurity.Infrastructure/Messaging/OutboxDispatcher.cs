// BackgroundService that polls outbox_messages where published_at IS NULL and publish_attempts < 10,
// publishes to RabbitMQ via IEventBus, then sets published_at or increments attempts with last_error.
// Uses IDbConnectionFactory to get DB connections; runs every minute.
// Ensures exactly-once delivery with transactional outbox pattern.
using System.Data;
using System.Text.Json;
using Dapper;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using IntegratedSecurity.Application.Abstractions;
using IntegratedSecurity.Infrastructure.Persistence;
using Npgsql;
using Polly;
using Polly.Retry;
using System.Threading;
using System.Threading.Tasks;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Runtime.CompilerServices;
using System.Diagnostics;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Collections.Concurrent;
using System.Data.Common;
using System.Net.Http;
using System.Net;
using System.Net.Sockets;
using System.IO;
using System.Buffers;
using System.Globalization;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Xml.Linq;
using System.Xml.Serialization;
using System.Xml;
using System.Xml.XPath;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.Runtime.InteropServices;
using System.Numerics;
using System.Reactive.Linq;
using System.Reactive.Subjects;
using System.Reactive.Threading.Tasks;
using System.Reactive.Concurrency;
using System.Reactive;
using System.Reactive;
using System.Reactive.Disposables;
using System.Reactive.PlatformServices;
using System.Reactive.Testing;
using System.Reactive.Joins;
using System.Reactive.Collections;
using System.Reactive.Diagnostics;
using System.Reactive.Extensions;
using System.Reactive.Interactive;
using System.Reactive.Linq.ObservableImpl;
using System.Reactive.Threading;
using System.Reactive.Concurrency.Schedulers;
using System.Reactive.Concurrency.Dispatchers; 
